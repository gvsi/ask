tinymce.PluginManager.requireLangPack("sh4tinymce"), tinymce.PluginManager.add("sh4tinymce", function(e, t) {
    function a() {
        function t(e) {
            for (var t = e.split(";"), a = {}, l = 0; l < t.length; l++) {
                var i = t[l].split(":");
                a[i[0].replace(/\-/g, "")] = i[1]
            }
            tinymce.each(a, function(e, t) {
                "brush" == t ? c.language != e && (c.language = e) : (e = "true" == e ? !0 : "false" == e ? !1 : e, "highlight" == t && (e = e.replace(/\[/g, "").replace(/\]/g, "")), c[t] = e)
            })
        }

        function a(t) {
            var a = t.data.code;
            a = a.replace(/\</g, "&lt;").replace(/\>/g, "&gt;");
            var l = t.data.language ? t.data.language : u;
            i = e.dom.create("code", {
                "class": l, contenteditable: 'false'
            }, a), g ? e.dom.replace('<pre  contenteditable="false">' + i + '</pre>', d) : e.insertContent('<pre contenteditable="false">' + e.dom.getOuterHTML(i) + '</pre><br>')
        }
        var l, i, n, o, r = (e.dom, e.selection),
            c = {},
            s = {},
            u = "",
            g = !1,
            d = r.getNode();
        s.autolinks = !0, s.collapse = !1, s.firstline = "1", s.gutter = !0, s.highlight = "", s.htmlscript = !1, s.tabsize = "4", s.toolbar = !0, c.language = "", c.autolinks = s.autolinks, c.collapse = s.collapse, c.firstline = s.firstline, c.gutter = s.gutter, c.highlight = s.highlight, c.htmlscript = s.htmlscript, c.tabsize = s.tabsize, c.toolbar = s.toolbar;
        var h = [{
            text: "Automatic Language Detection",
            value: ""
        }, {
            text: "ActionScript",
            value: "actionscript"
        }, {
            text: "Intel x86 Assembly",
            value: "x86asm"
        }, {
            text: "Bash/shell",
            value: "bash"
        }, {
            text: "C#",
            value: "cs"
        }, {
            text: "C++",
            value: "cpp"
        }, {
            text: "CSS",
            value: "css"
        }, {
            text: "Delphi",
            value: "delphi"
        }, {
            text: "Erlang",
            value: "erlang"
        }, {
            text: "Haskell",
            value: "haskell"
        }, {
            text: "HTML/XML",
            value: "xml"
        }, {
            text: "Java",
            value: "java"
        }, {
            text: "JavaScript",
            value: "javascript"
        }, {
            text: "JSON",
            value: "json"
        }, {
            text: "Matlab",
            value: "matlab"
        }, {
            text: "Objective C",
            value: "objectivec"
        }, {
            text: "Perl",
            value: "perl"
        }, {
            text: "PHP",
            value: "php"
        }, {
            text: "Python",
            value: "python"
        }, {
            text: "Ruby",
            value: "ruby"
        }, {
            text: "Scala",
            value: "scala"
        }, {
            text: "SQL",
            value: "sql"
        }, {
            text: "Swift",
            value: "swift"
        }, {
            text: "TeX/LaTeX",
            value: "tex"
        }, {
            text: "Visual Basic",
            value: "vbnet"
        }
      ];
        "pre" == d.nodeName.toLowerCase() && -1 != d.className.indexOf("brush:") ? (g = !0, n = $(d).html(), n = n.replace(/\&lt\;/gi, "<").replace(/\&gt\;/gi, ">"), o = d.className, o = o.replace(/ /g, ""), t(o)) : (n = r.getContent({
            format: "text"
        }), c.autolinks = !1, c.toolbar = !1);
        for (var p = 0; p < h.length; p++) h[p].value == c.language && (h[p].selected = !0);
        c.code = n, "&nbsp;" == c.code && (c.code = ""), l = e.windowManager.open({
            title: "Code Editor",
            data: c,
            minWidth: 450,
            body: [{
                name: "language",
                type: "listbox",
                values: h
            }, {
                name: "code",
                type: "textbox",
                minHeight: 200,
                multiline: !0
            }],
            onsubmit: a
        })
    }
    tinymce.DOM.loadCSS(t + "/style/style.css"), e.addButton("sh4tinymce", {
        icon: "sh4tinymce",
        tooltip: "Insert/Edit Code",
        onclick: a
    }), e.addMenuItem("sh4tinymce", {
        text: "SH4TinyMCE",
        icon: "sh4tinymce",
        context: "insert",
        onclick: a
    })
});
